services:
  laravel-app:
    image: ${REGISTRY:-localhost}/runarion-app-laravel:${TAG:-latest}
    build:
      context: ./runarion-laravel
      dockerfile: dockerfile
    deploy:
      replicas: ${LARAVEL_REPLICAS:-2}
      update_config:
        parallelism: ${LARAVEL_UPDATE_PARALLELISM:-1}
        delay: ${LARAVEL_UPDATE_DELAY:-10s}
        order: ${LARAVEL_UPDATE_ORDER:-start-first}
      restart_policy:
        condition: ${LARAVEL_RESTART_CONDITION:-on-failure}
      resources:
        limits:
          memory: ${LARAVEL_MEMORY_LIMIT:-2048M}
        reservations:
          memory: ${LARAVEL_MEMORY_RESERVATION:-1024M}
      placement:
        constraints: ${LARAVEL_PLACEMENT_CONSTRAINTS:-[ node.role == manager ]}
    ports:
      - "${LARAVEL_PORT:-8000}:${LARAVEL_PORT:-8000}"
    environment:
      APP_ENV: ${APP_ENV:-production}
      APP_DEBUG: ${APP_DEBUG:-"false"}
      APP_URL: ${APP_URL:-http://localhost}
      DB_CONNECTION: ${DB_CONNECTION:-pgsql}
      DB_HOST: ${DB_HOST:-postgres-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE:-runarion}
      DB_USERNAME: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      PYTHON_SERVICE_URL: ${PYTHON_SERVICE_URL:-http://runarion-python:5000}
      APP_LOCALE: ${APP_LOCALE:-en}
      APP_FALLBACK_LOCALE: ${APP_FALLBACK_LOCALE:-en}
      APP_FAKER_LOCALE: ${APP_FAKER_LOCALE:-en_US}
      PHP_CLI_SERVER_WORKERS: ${PHP_CLI_SERVER_WORKERS:-4}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      VITE_PORT: ${VITE_PORT:-5173}
      VITE_HOST: ${VITE_HOST:-0.0.0.0}
      VITE_SERVICE_URL: ${VITE_SERVICE_URL:-http://localhost:5173}
      NODE_OPTIONS: ${NODE_OPTIONS:-"--max_old_space_size=2048"}
    networks:
      - runarion-app-network
    depends_on:
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${LARAVEL_PORT:-8000}/health"]
      interval: ${LARAVEL_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${LARAVEL_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${LARAVEL_HEALTHCHECK_RETRIES:-3}
      start_period: ${LARAVEL_HEALTHCHECK_START_PERIOD:-10s}
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-10m}
        max-file: ${LOG_MAX_FILE:-3}
    command: >
      sh -c "npm install --verbose --legacy-peer-deps &&
             npm run build &&
             php artisan key:generate --force &&
             php artisan config:cache &&
             php artisan route:cache &&
             php artisan view:cache &&
             php artisan serve --host=0.0.0.0 --port=${LARAVEL_PORT:-8000}"
             
  python-app:
    image: ${REGISTRY:-localhost}/runarion-app-runarion-python:${TAG:-latest}
    build:
      context: ./runarion-python
      dockerfile: dockerfile
    deploy:
      replicas: ${PYTHON_REPLICAS:-2}
      update_config:
        parallelism: ${PYTHON_UPDATE_PARALLELISM:-1}
        delay: ${PYTHON_UPDATE_DELAY:-10s}
        order: ${PYTHON_UPDATE_ORDER:-start-first}
      restart_policy:
        condition: ${PYTHON_RESTART_CONDITION:-on-failure}
      resources:
        limits:
          memory: ${PYTHON_MEMORY_LIMIT:-1024M}
        reservations:
          memory: ${PYTHON_MEMORY_RESERVATION:-512M}
      placement:
        constraints: ${PYTHON_PLACEMENT_CONSTRAINTS:-[ node.role == manager ]}
    ports:
      - "${PYTHON_PORT:-5000}:${PYTHON_PORT:-5000}"
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DB_HOST: ${DB_HOST:-postgres-db}
      DB_PORT: ${DB_PORT:-5432}
      DB_DATABASE: ${DB_DATABASE:-runarion}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FLASK_ENV: ${FLASK_ENV:-production}
      FLASK_DEBUG: ${FLASK_DEBUG:-"0"}
    networks:
      - runarion-app-network
    depends_on:
      postgres-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PYTHON_PORT:-5000}/health"]
      interval: ${PYTHON_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${PYTHON_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${PYTHON_HEALTHCHECK_RETRIES:-3}
      start_period: ${PYTHON_HEALTHCHECK_START_PERIOD:-10s}
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-10m}
        max-file: ${LOG_MAX_FILE:-3}

  postgres-db:
    image: ${REGISTRY:-localhost}/runarion-app-postgres:${TAG:-latest}
    build:
      context: .
      dockerfile: dockerfile
    deploy:
      placement:
        constraints: ${POSTGRES_PLACEMENT_CONSTRAINTS:-[ node.role == manager ]}
      restart_policy:
        condition: ${POSTGRES_RESTART_CONDITION:-on-failure}
      resources:
        limits:
          memory: ${POSTGRES_MEMORY_LIMIT:-1G}
        reservations:
          memory: ${POSTGRES_MEMORY_RESERVATION:-512M}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_DATABASE:-runarion}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
      POSTGRES_INITDB_WALDIR: ${POSTGRES_INITDB_WALDIR:-}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:-}
      PG_MAJOR: ${PG_MAJOR:-17}
      PG_VERSION: ${PG_VERSION:-17.4-1.pgdg120+2}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data}
      POSTGRES_GID: ${POSTGRES_GID:-999}
      POSTGRES_UID: ${POSTGRES_UID:-999}
      GOSU_VERSION: ${GOSU_VERSION:-1.17}
      LANG: ${LANG:-en_US.utf8}
    networks:
      - runarion-app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_DATABASE:-runarion}"]
      interval: ${POSTGRES_HEALTHCHECK_INTERVAL:-10s}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT:-5s}
      retries: ${POSTGRES_HEALTHCHECK_RETRIES:-5}
      start_period: ${POSTGRES_HEALTHCHECK_START_PERIOD:-10s}
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-10m}
        max-file: ${LOG_MAX_FILE:-3}

networks:
  runarion-app-network:
    driver: ${NETWORK_DRIVER:-overlay}
    attachable: ${NETWORK_ATTACHABLE:-true}

volumes:
  postgres_data:
    driver: ${VOLUME_DRIVER:-local}
